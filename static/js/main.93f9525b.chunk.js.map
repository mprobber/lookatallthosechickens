{"version":3,"sources":["daremix.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","getRandomNumber","max","Math","floor","random","Chicken","lock","top","left","onLoad","src","style","position","alt","App","useState","lockNumbers","setLockNumbers","audioRef","useRef","addNextImage","useCallback","setTimeout","window","innerHeight","innerWidth","letsgo","audio","current","paused","currentTime","play","className","width","height","backgroundColor","length","onClick","cursor","textTransform","daremix","type","ref","map","lockNumber","idx","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,qC,+LCK3C,SAASC,EAAgBC,GACvB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,GAGpC,SAASI,EAAT,GAA6C,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,IAAKC,EAAe,EAAfA,KAAMC,EAAS,EAATA,OAEjC,OAAO,yBAAKC,IAAG,uDAAkDJ,GAAQG,OAAQA,EAAQE,MAAO,CAACC,SAAU,WAAYL,MAAKC,QAAOK,IAAI,YAiC1HC,MA9Bf,WAAgB,IAAD,EACyBC,mBAAS,IADlC,mBACNC,EADM,KACOC,EADP,KAEPC,EAAWC,iBAAO,MAElBC,EAAeC,uBAAY,WAC/BC,YAAW,WACXL,GAAe,SAAAD,GAAW,4BAAQA,GAAR,CAAqB,CAACV,KAAMN,EAAgB,KAAOO,IAAKP,EAAgBuB,OAAOC,YAAc,KAAMhB,KAAMR,EAAgBuB,OAAOE,WAAa,aACpK,OACF,IAEGC,EAASL,uBAAY,WACzBD,IACA,IAAMO,EAAMT,EAASU,QACjBD,GAASA,EAAME,SACjBF,EAAMG,YAAc,GACpBH,EAAMI,UAEP,CAACX,IAEJ,OACE,yBAAKY,UAAU,MAAMrB,MAAO,CAACC,SAAU,QAASqB,MAAO,QAASC,OAAQ,QAASC,gBAAiB,UAC9FnB,EAAYoB,QAAU,4BAAQC,QAASX,EAAQf,MAAO,CAAC2B,OAAQ,UAAWL,MAAO,QAASC,OAAQ,QAASC,gBAAiB,OAAQI,cAAc,cAA5H,kBACxB,2BAAO7B,IAAK8B,IAASC,KAAK,YAAYC,IAAKxB,IAC1CF,EAAY2B,KAAI,SAACC,EAAYC,GAC5B,OAAO,kBAACxC,EAAD,iBAAauC,EAAb,CAAyBE,IAAKD,EAAKpC,OAAQoC,IAAQ7B,EAAYoB,OAAS,EAAIhB,EAAe,aC1BtF2B,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.93f9525b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/daremix.75f18f46.mp3\";","import React, {useState, useCallback, useRef} from 'react';\n\nimport daremix from './daremix.mp3';\nimport './App.css';\n\nfunction getRandomNumber(max) {\n  return Math.floor(Math.random() * max);\n}\n\nfunction Chicken({lock, top, left, onLoad}) {\n\n  return <img src={`https://loremflickr.com/320/240/chicken?lock=${lock}`} onLoad={onLoad} style={{position: 'absolute', top, left}} alt=\"chicken\" />\n}\n\nfunction App() {\n  const [lockNumbers, setLockNumbers] = useState([]);\n  const audioRef = useRef(null);\n\n  const addNextImage = useCallback(() => {\n    setTimeout(() => {\n    setLockNumbers(lockNumbers => [...lockNumbers, {lock: getRandomNumber(4000), top: getRandomNumber(window.innerHeight - 240), left: getRandomNumber(window.innerWidth - 420) }]);\n    }, 800)\n  }, []);\n\n  const letsgo = useCallback(() => {\n    addNextImage();\n    const audio=audioRef.current;\n    if (audio && audio.paused) {\n      audio.currentTime = 45;\n      audio.play();\n    }\n  }, [addNextImage]);\n\n  return (\n    <div className=\"App\" style={{position: 'fixed', width: '100vw', height: '100vh', backgroundColor: '#000'}}>\n      {!lockNumbers.length && <button onClick={letsgo} style={{cursor: 'pointer', width: '100vw', height: '100vh', backgroundColor: '#fff', textTransform:'uppercase'}}>are you ready?</button>}\n      <audio src={daremix} type=\"audio/mp3\" ref={audioRef}/>\n      {lockNumbers.map((lockNumber, idx) => {\n        return <Chicken {...lockNumber} key={idx} onLoad={idx === lockNumbers.length - 1 ? addNextImage : null} />\n      })}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}